//
//  MessagesViewController.swift
//  MindMap Messages
//
//  Created by Jeff on 9/5/16.
//  Copyright Â© 2016 Jeff Small. All rights reserved.
//

import UIKit
import Messages

@IBDesignable class BorderView: UIView {
    @IBInspectable var borderWidth: CGFloat = 0 {
        didSet {
            layer.borderWidth = borderWidth
        }
    }
    
    @IBInspectable var borderColor: UIColor? {
        didSet {
            layer.borderColor = borderColor?.cgColor
        }
    }
    
    @IBInspectable var cornerRadius: CGFloat = 0 {
        didSet {
            layer.cornerRadius = cornerRadius
        }
    }
}

extension MessagesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "listItemTableViewCell") as? GroceryListTableViewCell else {
            return UITableViewCell()
        }
        
        cell.contentLabel.text = listItems[indexPath.row]
        return cell
    }
}


class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var newItemTextView: UITextView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var addItemView: BorderView!
    
    var listItems = [String]()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        newItemTextView.layer.borderColor = UIColor.lightGray.cgColor
        newItemTextView.layer.borderWidth = 0.5
        newItemTextView.layer.cornerRadius = 5
        
        hideNewItemView()
        
        tableView.dataSource = self
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    @IBAction func showNewItemButtonTapped(_ sender: AnyObject) {
        showNewItemView()
    }
    
    func showNewItemView() {
        addItemView.isHidden = false
        view.bringSubview(toFront: addItemView)
    }
    
    func hideNewItemView() {
        addItemView.isHidden = true
        view.sendSubview(toBack: addItemView)
        
    }
    
    @IBAction func addListItemTapped(_ sender: AnyObject) {
        guard newItemTextView.text != nil && !newItemTextView.text.isEmpty else {
            return
        }
        
        let groceryItem = newItemTextView.text ?? "newitem"
        listItems.append(groceryItem)
        newItemTextView.text = ""
        tableView.reloadData()
        
        guard let conversation = activeConversation else {
            return
        }
        
        sendGroceryList(item: groceryItem, to: conversation)
    }
    
    func sendGroceryList(item: String, to conversation: MSConversation) {
        let groceryMessage = GroceryListMessage()
        groceryMessage.groceryListItem = item
        conversation.insert(groceryMessage, completionHandler: nil)
    }
    
    @IBAction func cancelButtonTapped(_ sender: AnyObject) {
        hideNewItemView()
    }
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        guard let groceryListMessage = message as? GroceryListMessage,
            let groceryItem = groceryListMessage.groceryListItem else
        {
            return
        }
        
        listItems.append(groceryItem)
        tableView.reloadData()
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
